@model IEnumerable<ProductViewModel>

@{
    ViewBag.Title = "All products";
    int counter = 1;

    Pager pager = new Pager();

    SearchModel searcher = new SearchModel();

    int pageNo = 0;

    if (ViewBag.Pager != null)
    {
        pager = ViewBag.Pager;
        pageNo = pager.CurrentPage;
    }
    else
    {
        pager.Action = "All";
        pager.Controller = "Product";
    }

    if (ViewBag.Searcher != null)
    {
        searcher = ViewBag.Searcher;
    }
    else
    {
        searcher.ViewName = "All";
    }
}

<script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.13.0/umd/react.development.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.13.0/umd/react-dom.development.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/remarkable/1.7.1/remarkable.min.js"></script>

<script src="@Url.Content("~/js/marketvault/src/Components/ProductViewComponent.jsx")"></script>

<script>
    let props = {};
</script>

<link rel="stylesheet" href="~/css/nomenclatures..css"/>

<div class="viewContainer">
    <partial name="_SearchProductPartial" model="@searcher" />

    <partial name="_PagerPartial" model="@pager" />

    <a asp-action="All" asp-controller="Product" id="showAllProductsBtn">
        Show All
    </a>

    @if (Model.Count() == 0)
    {
        <h1 class="notFoundProductsBtn">No products found! Try again!</h1>
    }

    else
    {
        <div class="productsContainer">

            <div class="productContainer productContainerFirst">
                <div id="-1" class="productComponentContainer productComponentContainerFirst"></div>

                <script>
                    props = {
                        name: 'Product Name',
                        cashRegisterName: 'Product Cash Register Name',
                        quantity: 'Product Quantity',
                        itemGroup: 'Product Item Group Name',
                        purchasePrice: 'Product Purchase Price',
                        salePrice: 'Product Sale Price',
                        codeForScales: 'Product Code For Scales',
                        dateAdded: 'Product Date Added',
                        dateModified: 'Product Date Modified',
                        measure: 'Product Measure'
                    };

                    ReactDOM.render(
                        React.createElement(ProductViewComponent, props),
                        document.getElementById('-1'),
                    );
                </script>
            </div>

            @foreach (ProductViewModel product in Model)
            {
                <div class="productContainer">
                    <div id="@counter" class="productComponentContainer"></div>
                    <script>
                        props = {
                            name: '@product.Name',
                            cashRegisterName: '@product.CashRegisterName',
                            quantity: @product.Quantity,
                            itemGroup: '@product.ItemGroupName',
                            purchasePrice: @product.PurchasePrice,
                            salePrice: @product.SalePrice,
                            codeForScales: '@product.CodeForScales',
                            dateAdded: '@product.DateAdded',
                            dateModified: '@product.DateModified',
                            measure: '@product.Measure'
                        };

                        ReactDOM.render(
                            React.createElement(ProductViewComponent, props),
                            document.getElementById(@counter),
                        );
                    </script>

                    <div class="productsButtons">
                        <a 
                            id="productDetailsBtn"
                            asp-controller="Product" asp-action="Details" asp-route-id="@product.Id">
                            Details
                        </a>
                        <a 
                            id="productEditBtn"
                            asp-controller="Product" asp-action="Edit" asp-route-id="@product.Id">
                            Edit
                        </a>
                        <a id="productDeleteBtn"
                            asp-controller="Product" asp-action="DeleteGet" asp-route-id="@product.Id">
                            Delete
                        </a>
                    </div>

                    @{
                        counter++;
                    }
                </div>
            }
        </div>
    }

    <partial name="_PagerPartial" model="@pager" />
</div>