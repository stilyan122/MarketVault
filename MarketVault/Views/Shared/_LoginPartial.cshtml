@using Microsoft.AspNetCore.Identity
@inject IUserService userService

@{
    bool isLoggedIn = false;

    if (User?.Identity?.IsAuthenticated ?? false)
    {
        if (!await userService.IsInRoleAsync(new string[] { "Worker" }, User.Id()) && 
        !await userService.IsInRoleAsync(new string[] { "Admin" }, User.Id()) 
        && !await userService.IsInRoleAsync(new string[] { "User" }, User.Id()))
        {
            var user = await this.userService.FindUserByIdAsync(User.Id());
            await userService.AddUserToRoleAsync(user, "User");
        }
        isLoggedIn = true;
    }
}

<ul class="navbar-nav">
@if (isLoggedIn)
{
    <li>
        <a asp-area="Identity" asp-page="/Account/Manage/Index" title="Manage">Hello 
            @await userService.GetUserFullNameAsync(User?.Id() ?? "0")!</a>
    </li>
    <li>
        <form asp-area="Identity" asp-page="/Account/Logout" 
        asp-route-returnUrl="@Url.Action("Index", "Home", new { area = "" })">
            <button type="submit">Logout</button>
        </form>
    </li>
}
else
{
    <li>
        <form asp-area="Identity" asp-page="/Account/Register">
            <button type="submit">Register</button>
        </form>
    </li>
    <li>
        <form asp-area="Identity" asp-page="/Account/Login">
            <button type="submit" class="loginBtn">Login</button>
        </form>
    </li>
}
</ul>
